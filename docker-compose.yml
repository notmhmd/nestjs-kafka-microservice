version: "3.8"
networks:
  app-net:
    driver: bridge

services:
  db:
    image: postgres:14.1-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    ports:
      - '5432:5432'
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - app-net
  zookeeper:
    image: 'docker.io/bitnami/zookeeper:3-debian-10'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-net
  kafka:

      image: 'docker.io/bitnami/kafka:latest'
      ports:
        - '9092:9092'
        - '9093:9093'
      environment:
        - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
        - ALLOW_PLAINTEXT_LISTENER=yes
        - KAFKA_CREATE_TOPICS="Topic1:1:3,Topic2:1:1:compact"
        - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
        - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
        - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
        - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://kafka:9093
        - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
        - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
        - KAFKA_BROKER_ID=1
      depends_on:
        - zookeeper
      networks:
        - app-net
  product-service:
    container_name: "product_service_${NODE_ENV}"
    image: "product_service_${NODE_ENV}"
    environment:
      - NODE_ENV:${NODE_ENV}
    build:
      context: ./product-service
      target: "${NODE_ENV}"
      dockerfile: Dockerfile
    entrypoint: ["npm", "run", "start:${NODE_ENV}" ]
    env_file:
      - .env
    depends_on:
      - db
    networks:
      - app-net
    volumes:
      - ./product-service:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped
  order-service:
    container_name: "order_service_${NODE_ENV}"
    image: "order_service_${NODE_ENV}"
    environment:
      - NODE_ENV:${NODE_ENV}
    build:
      context: ./order-service
      target: "${NODE_ENV}"
      dockerfile: Dockerfile
    entrypoint: [ "npm", "run", "start:${NODE_ENV}" ]
    env_file:
      - .env
    depends_on:
      - db
    networks:
      - app-net
    volumes:
      - ./order-service:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped
  user-service:
    container_name: "user_service_${NODE_ENV}"
    image: "user_service_${NODE_ENV}"
    environment:
      - NODE_ENV:${NODE_ENV}
    build:
      context: ./order-service
      target: "${NODE_ENV}"
      dockerfile: Dockerfile
    entrypoint: [ "npm", "run", "start:${NODE_ENV}" ]
    env_file:
      - .env
    depends_on:
      - db
    networks:
      - app-net
    volumes:
      - ./user-service:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped
  api-gateway:
    container_name: "api_gateway_${NODE_ENV}"
    image: "api_gateway_${NODE_ENV}"
    environment:
      - NODE_ENV:${NODE_ENV}
    build:
      context: ./api-gateway
      target: "${NODE_ENV}"
      dockerfile: Dockerfile
    entrypoint: [ "npm", "run", "start:${NODE_ENV}" ]
    env_file:
      - .env
    ports:
      - '3000:3000'
    depends_on:
      - db
    networks:
      - app-net
    volumes:
      - ./api-gateway:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped

volumes:
    db:
      driver: local